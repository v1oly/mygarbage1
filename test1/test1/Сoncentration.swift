import Foundation

class –°oncentration {
    
    var —Åards = [Card]()
    private(set) var scores = 0
    private(set) var flipCount = 0
    private var indexOfOneAndOnlyFaceUpCard: Int? {
        get {
            return —Åards.indices.filter { —Åards[$0].isFacedUp }.oneAndOnly
        }
        set {
            for index in —Åards.indices {
                —Åards[index].isFacedUp = (index == newValue)
            }
        }
    }
    var arrayOfEmojiChoices: [String] = []
    var emoji = [Int: String]()
    var cardColor: String = ""
    var timeIntervalBuffer = Date()
    
    init(numberOfPairsCards: Int) {
        selectRandomEmojiPack()
        for _ in 0..<numberOfPairsCards {
            let card = Card()
            —Åards += [card, card]
        }
        for _ in —Åards.indices {
            let randomIndex1 = Int.random(in: 0..<—Åards.count)
            let randomIndex2 = Int.random(in: 0..<—Åards.count)
            —Åards.swapAt(randomIndex1, randomIndex2)
        }
    }
    
    func selectRandomEmojiPack() {
        let randomIndex = Int.random(in: 0...6)
        switch randomIndex {
        case 0:
            arrayOfEmojiChoices = ["üê∂", "üê±", "üê≠", "üêπ", "ü¶ä", "üê∏", "ü¶Å"]
            cardColor = "Orange"
        case 1:
            arrayOfEmojiChoices = ["üçë", "ü••", "üçâ", "üçí", "ü•ù", "üçÖ", "üçì"]
            cardColor = "Light Green"
        case 2:
            arrayOfEmojiChoices = ["ü•ê", "üçî", "üçü", "üçï", "ü•™", "ü•ô", "üç±"]
            cardColor = "Light Red"
        case 3:
            arrayOfEmojiChoices = ["‚öΩÔ∏è", "üèÄ", "üèà", "‚öæÔ∏è", "üéæ", "üèê", "üé±"]
            cardColor = "Yellow"
        case 4:
            arrayOfEmojiChoices = ["üá∫üá∏", "üá∫üá¶", "üá´üá∑", "üá∑üá∫", "üáµüá±", "üá®üá¶", "üáßüáæ"]
            cardColor = "Purple"
        case 5:
            arrayOfEmojiChoices = ["üòÄ", "üòé", "üòá", "ü§¢", "ü§ì", "ü§™", "üòç"]
            cardColor = "Pink"
        default:()
        }
    }
    
    func emoji(for card: Card) -> String {
        if emoji[card.identifier] == nil {
            if !arrayOfEmojiChoices.isEmpty {
                let randomIndex = Int.random(in: 0..<arrayOfEmojiChoices.count)
                emoji[card.identifier] = arrayOfEmojiChoices.remove(at: randomIndex)
            }
        }
        return emoji[card.identifier] ?? "?"
    }
    
    func chooseCard(at index: Int) {
        if !—Åards[index].isMatched {
            flipCount += 1
            
            if let matchIndex = indexOfOneAndOnlyFaceUpCard, matchIndex != index {
                let secondClick = Date().timeIntervalSince(timeIntervalBuffer)
                
                if —Åards[matchIndex].identifier == —Åards[index].identifier {
                    —Åards[matchIndex].isMatched = true
                    —Åards[index].isMatched = true
                    
                    if secondClick < 3 {
                        scores += 3
                    } else {
                        scores += 2
                    }
                } else {
                    if  —Åards[matchIndex].isOpenedOnce || —Åards[index].isOpenedOnce {
                        scores -= 1
                    }
                }
                
                —Åards[matchIndex].isOpenedOnce = true
                —Åards[index].isOpenedOnce = true
                —Åards[index].isFacedUp = true
            } else {
                let firstClick = Date()
                timeIntervalBuffer = firstClick
                indexOfOneAndOnlyFaceUpCard = index
            }
        }
    }
}

extension Collection {
    var oneAndOnly: Element? {
        return count == 1 ? first : nil
    }
}
